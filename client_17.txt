// C++ program for the Client Side
#include<iostream.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/socket.h>
#include<errno.h>
// inet_addr
#include<arpa/inet.h>
#include<unistd.h>
#include<netinet/in.h>
// For threading, link with lpthread
#include<pthread.h>
#include<semaphore.h>
using namespace std;

// Function to send data to
// server socket.
void* clienthread(void* args)
{

	int client_request = *((int*)args);
	int network_socket;

	// Create a stream socket
	 int network_socket = socket(AF_INET,SOCK_STREAM, 0);
	 if(network_socket == -1)
	 {
	 perror("error in client connecion");
	 exit(1);
	 }

	// Initialise port number and address
	struct sockaddr_in server_addr;
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
	server_addr.sin_port = 8808;

	// Initiate a socket connection
	int connection_status;
	socklen_t len=sizeof(server_addr);
	connection_status = connect(network_socket,(struct sockaddr*)&server_addr,len);

	// Check for connection error
	if (connection_status == -1)
	 {
		perror("connection error");
		exit(1);
	}
	
	// Send data to the socket
	//send(network_socket, &client_request,sizeof(client_request), 0);

	char ch[100],buf[100];
	cout<<"enter the string"<<endl;
	fgets(ch,sizeof(ch)-1,stdin);
	write(network_socket,ch,strlen(ch));
	int n = read(network_socket,buf,sizeof(buf));
	write(1,buf,n);
	// Close the connection
	puts(buf);
	close(network_socket);
	pthread_exit(NULL);

	return 0;
}

// Driver Code
int main()
{
	cout<<"1. Read "<<endl; 
	cout<<"2. Write"<<endl;

	// Input
	
	int choice;
	cin>>choice;
	pthread_t tid;

	// Create connection
	// depending on the input
	switch (choice) 
	{
	case 1: {
		int client_request = 1;

		// Create thread
		pthread_create(&tid, NULL,clienthread,&client_request);
		sleep(3);
		break;
		}
	case 2: {
		int client_request = 2;

		// Create thread
		pthread_create(&tid, NULL,clienthread,&client_request);
		sleep(3);
		break;
		}
	default:
	{
		cout<<"invalid input"<<endl;
		break;
	}

	// Suspend execution of
	// calling thread
	pthread_join(tid, NULL);
}

